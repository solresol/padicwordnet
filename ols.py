#!/usr/bin/env python3

import argparse
import json
import fractions
import sympy
import sys
import pandas
import sklearn.linear_model

parser = argparse.ArgumentParser()
parser.add_argument("--input-file", default="zorgette-catalog.json",
                    help="File generated by create_zorgette_catalogue.py. Should be a list of 3-element lists")
parser.add_argument("--output", help="Where to create a LaTeX file with the equation results")
args = parser.parse_args()

def load_data(input_file: str) -> pandas.DataFrame:
    data = pandas.DataFrame(json.load(open(input_file)), columns=['x', 'y', 'z'])
    return data

data = load_data(args.input_file)

ols = sklearn.linear_model.LinearRegression()
def ols_fit(data: pandas.DataFrame) -> sklearn.linear_model.LinearRegression:
    ols = sklearn.linear_model.LinearRegression()
    ols.fit(data[['y', 'z']], data['x'])
    return ols

ols = ols_fit(data)

y, z = sympy.symbols('y z')
def calculate_equation(ols: sklearn.linear_model.LinearRegression, y: sympy.Symbol, z: sympy.Symbol) -> sympy.Add:
    equation = ols.coef_[0] * y + ols.coef_[1] * z + ols.intercept_
    return equation

equation = calculate_equation(ols, y, z)

if args.output:
    with open(args.output,'w') as f:
        f.write(r'\newcommand{\zorgetteols}[0]{x = ')
        f.write(sympy.latex(equation))
        f.write('}\n')


